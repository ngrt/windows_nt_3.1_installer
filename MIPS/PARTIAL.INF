[PartialUiVars]
    ComponentList       = {Readme, Accessories, Games, Savers, Wallpapers}
    DoReadme            = $(!Chosen)
    DoAccessories       = $(!Chosen)
    DoGames             = $(!Chosen)
    DoSavers            = $(!Chosen)
    DoWallpapers        = $(!Chosen)
    ReadmeExisting      = {}
    AccessoriesExisting = {}
    GamesExisting       = {}
    SaversExisting      = {}
    WallpapersExisting  = {}
    ReadmeInstall       = {}
    AccessoriesInstall  = {}
    GamesInstall        = {}
    SaversInstall       = {}
    WallpapersInstall   = {}
    VolumeList          = {} ? $(!LIBHANDLE) GetHardDriveLetters
    VolumeSizeList      = {} ? $(!LIBHANDLE) GetHardDriveTotalSpace
    VolumeFreeList      = {} ? $(!LIBHANDLE) GetHardDriveFreeSpace
    VolumeFSList        = {} ? $(!LIBHANDLE) GetHardDriveFileSystems
[PartialDestinationVars]
    ReadmeDest          = $(!STF_WINDOWSPATH)
    AccessoriesDest     = $(!STF_WINDOWSSYSPATH)
    GamesDest           = $(!STF_WINDOWSSYSPATH)
    SaversDest          = $(!STF_WINDOWSSYSPATH)
    WallpapersDest      = $(!STF_WINDOWSPATH)
    MainDest            = $(!STF_WINDOWSSYSPATH)
    AdminToolsDest      = $(!STF_WINDOWSSYSPATH)
    StartupDest         = $(!STF_WINDOWSSYSPATH)
[DoProgmanComponents]
    set Status         = STATUS_FAILED
    set ProgmanOptions = {}
    read-syms Strings$(!STF_LANGUAGE)
    shell "subroutn.inf" PushBillboard STATUSDLG $(String4)
    StartWait
    read-syms PartialUiVars
    detect    PartialUiVars
    read-syms PartialDestinationVars
    ForListDo $(ComponentList)
        set $($)OptionList = ^(Optional$($)$(!STF_LANGUAGE), 0)
    EndForListDo
    ForListDo $(ComponentList)
        set Component            = $($)
        set $(Component)SizeList = {}
        ForListDo $($($)OptionList)
            set SizeFullField = #(Files-$(!STF_PLATFORM)-WindowsOptions, $($), 3)
            Split-String $(SizeFullField) "=" SplitString
            set Size = *($(SplitString), 3)
            set $(Component)SizeList = >($($(Component)SizeList), $(Size))
        EndForListDo
    EndForListDo
    ForListDo $(ComponentList)
        set $($)Install = $($($)OptionList)
    EndForListDo
    EndWait
partial =+
    Set FreeForOptional = *($(VolumeFreeList), ~($(VolumeList), $(!STF_NTDRIVE)))
    ForListDo $(ComponentList)
        set Component = $($)
        set AddList = {}
        ForListDo $($($)Install)
            set AddList = >($(AddList), *($($(Component)SizeList), ~($($(Component)OptionList), $($))))
        EndForListDo
        install Install-SumList
        set $(Component)Size = $(Sum)
    EndForListDo
    set PartialTotalSize = 0
    ForListDo $(ComponentList)
        ifstr(i) Do$($) == $(!Chosen)
            set-add PartialTotalSize = $(PartialTotalSize) $($($)Size)
        endif
    EndForListDo
    ifint $(PartialTotalSize) > $(FreeForOptional)
        ForListDo $(ComponentList)
            set Do$($) = $(!NotChosen)
        EndForListDo
    endif
    EndWait
    shell "subroutn.inf" PopBillboard
partial_rst =+
    ifstr(i) $(!STF_INSTALL_MODE) == EXPRESS
        set Status = STATUS_SUCCESSFUL
        goto set_partial_components
    endif
    ifstr(i) $(!DoPartial) != $(!Chosen)
        set Status = STATUS_SUCCESSFUL
        goto set_partial_components
    endif
    set DlgTemplate = "PARTIAL"
    set HelpContext = $(!IDH_DB_OPTIONAL_INS)
    read-syms PartialDlg$(!STF_LANGUAGE)
    read-syms PartialDlg_CanBe$(!STF_LANGUAGE)
    EndWait
    ui start "Partial"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        Set PartialTotalSize = 0
        ForListDo $(ComponentList)
            set Do$($) = *($(CheckItemsOut), $(#))
            ifstr(i) $(Do$($)) == $(!Chosen)
                set-add PartialTotalSize = $(PartialTotalSize) $($($)Size)
            endif
        EndForListDo
        ui pop 1
        StartWait
        set Status = STATUS_SUCCESSFUL
        goto set_partial_components
    else-ifstr(i) $(DLGEVENT) == "CUSTOMISE"
        StartWait
        ForListDo $(ComponentList)
            set Do$($) = *($(CheckItemsOut), $(#))
        EndForListDo
        set Component = *($(ComponentList), $(ButtonChecked))
        goto customise
    else-ifstr(i) $(DLGEVENT) == "EXIT"
        shell "subroutn.inf" QueryUserQuit $(!STF_LANGUAGE)
        ifstr(i) $($R1) == "OK"
            set Status = STATUS_USERQUIT
            ui pop 1
            StartWait
            goto finish_partial
        else
            set ReInit = NO
            goto partial_rst
        endif
    else
        ui pop 1
        StartWait
        goto finish_partial
    endif
customise =+
    set ComponentOptions = ^(Optional$(Component)$(!STF_LANGUAGE), 0)
    set DualUnInstall = {}
    set DualInstall   = {}
    ForListDo $(ComponentOptions)
        set ListItem = { #(Optional$(Component)$(!STF_LANGUAGE), $($), 1), +
                         *($($(Component)SizeList), ~($($(Component)OptionList), $($))), +
                         $($) }
        IfContains(i) $($) IN $($(Component)Install)
            set DualInstall = >($(DualInstall), $(ListItem))
        else
            set DualUnInstall = >($(DualUnInstall), $(ListItem))
        endif
    EndForListDo
    set HelpContext = $(!IDH_DB_CUSTOMISE_INS)
    read-syms CustomiseDlg$(!STF_LANGUAGE)
    EndWait
    ui start "Customise"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        ifstr(i) $(ListItemsOut) == {}
            set $(Component)Install = {}
            set $(Component)Size    = 0
            set Do$(Component)      = $(!NotChosen)
        else
            set $(Component)Install = {}
            set AddList = {}
            ForListDo $(ListItemsOut)
                set $(Component)Install = >($($(Component)Install), *($($), 3))
                set AddList = >($(AddList), *($($), 2))
            EndForListDo
            install Install-SumList
            set $(Component)Size = $(Sum)
            set Do$(Component)   = $(!Chosen)
        endif
        set ReInit = YES
        ui pop 1
        goto partial_rst
    else-ifstr(i) $(DLGEVENT) == "BACK"
        set ReInit = NO
        ui pop 1
        goto partial_rst
    else-ifstr(i) $(DLGEVENT) == "EXIT"
        shell "subroutn.inf" QueryUserQuit $(!STF_LANGUAGE)
        ifstr(i) $($R1) == "OK"
            set Status = STATUS_USERQUIT
            ui pop 2
            StartWait
            goto finish_partial
        else
            goto customise
        endif
    else
        ui pop 2
        goto finish_partial
    endif
set_partial_components = +
    StartWait
    ForListDo $(ComponentList)
        set $($)ToInstall = $($($)Install)
        set $($)ToRemove  = {}
    EndForListDo
    set SrcDir = $(!STF_SRCDIR)
    install Install-PartialFileCopy
    set ProgmanOptions = {}
    ForListDo $(ComponentList)
        ifstr(i) $(Do$($)) == $(!Chosen)
            set ProgmanOptions = >($(ProgmanOptions), {$($),$($($)Install)})
        endif
    EndForListDo
finish_partial = +
    StartWait
    Return $(Status) $(ProgmanOptions)
[ConfigureProgman]
    set Status = STATUS_FAILED
    read-syms PartialDestinationVars
    set AccessoriesToInstall = {}
    set ReadmeToInstall      = {}
    set GamesToInstall       = {}
    set WallpapersToInstall  = {}
    set SaversToInstall      = {}
    ForListDo $($0)
        set *($($), 1)ToInstall = *($($), 2)
    EndForListDo
    EndWait
    install InstallProgramGroups
    StartWait
    ifstr(i) $(STF_INSTALL_OUTCOME) != "STF_SUCCESS"
        goto end_ConfigureProgman
    endif
    set StartupGroup = #(ProgmanGroupsDescription$(!STF_LANGUAGE), Startup, 1)
    shell registry.inf MakeStartupEntry $(StartupGroup)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "PARTIAL.INF: shelling MakeStartupEntry failed"
    else-ifstr(i) $($R0) != STATUS_SUCCESSFUL
        Debug-Output "PARTIAL.INF: MakeStartupEntry failed"
    endif
    set Status = STATUS_SUCCESSFUL
end_ConfigureProgman = +
    Return $(Status)
[MaintainProgmanComponents]
    set Status         = STATUS_FAILED
    set DrivesToFree   = {}
    set ProgmanOptions = {}
    read-syms Strings$(!STF_LANGUAGE)
    read-syms PartialUiVars
    detect    PartialUiVars
    read-syms PartialDestinationVars
    ForListDo $(ComponentList)
        set $($)OptionList = ^(Optional$($)$(!STF_LANGUAGE), 0)
    EndForListDo
    ForListDo $(ComponentList)
        set Component            = $($)
        set $(Component)SizeList = {}
        ForListDo $($($)OptionList)
            set SizeFullField = #(Files-$(!STF_PLATFORM)-WindowsOptions, $($), 3)
            Split-String $(SizeFullField) "=" SplitString
            set Size = *($(SplitString), 3)
            set $(Component)SizeList = >($($(Component)SizeList), $(Size))
        EndForListDo
    EndForListDo
    ForListDo $(ComponentList)
        set Component   = $($)
        set Destination = $($(Component)Dest)
        set ComponentOptions = ^(Optional$($)$(!STF_LANGUAGE), 0)
        ForListDo $(ComponentOptions)
            set ComponentFile = #(Files-$(!STF_PLATFORM)-WindowsOptions, $($), 2)
            LibraryProcedure STATUS,$(!LIBHANDLE),CheckFileExistance $(Destination)"\"$(ComponentFile)
            ifstr(i) $(STATUS) == YES
                set $(Component)Existing = >($($(Component)Existing), $($))
            endif
        EndForListDo
    EndForListDo
    ForListDo $(ComponentList)
        set $($)Install = $($($)Existing)
    EndForListDo
    Set FreeForOptional = *($(VolumeFreeList), ~($(VolumeList), $(!STF_NTDRIVE)))
    ForListDo $(ComponentList)
        set Component = $($)
        set AddList = {}
        ForListDo $($($)Install)
            set AddList = >($(AddList), *($($(Component)SizeList), ~($($(Component)OptionList), $($))))
        EndForListDo
        install Install-SumList
        set $(Component)Size = $(Sum)
    EndForListDo
    set PartialTotalSize = 0
    ForListDo $(ComponentList)
        ifstr(i) Do$($) == $(!Chosen)
            set-add PartialTotalSize = $(PartialTotalSize) $($($)Size)
        endif
    EndForListDo
mpartial_rst =+
    set DlgTemplate = "ADDREMOVE"
    set HelpContext = $(!IDH_DB_MOPTIONAL_INS)
    read-syms PartialDlg$(!STF_LANGUAGE)
    read-syms PartialDlg_Are$(!STF_LANGUAGE)
    EndWait
    ui start "Partial"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        ui pop 1
        StartWait
        ForListDo $(ComponentList)
            set Do$($) = *($(CheckItemsOut), $(#))
            ifstr(i) $(Do$($)) == $(!Chosen)
            else
                set $($)Install = {}
            endif
        EndForListDo
        set Status = STATUS_SUCCESSFUL
        goto mset_partial_components
    else-ifstr(i) $(DLGEVENT) == "CUSTOMISE"
        StartWait
        ForListDo $(ComponentList)
            set Do$($) = *($(CheckItemsOut), $(#))
        EndForListDo
        set Component = *($(ComponentList), $(ButtonChecked))
        goto mcustomise
    else-ifstr(i) $(DLGEVENT) == "BACK"
        set Status = STATUS_USERQUIT
        ui pop 1
        StartWait
        goto mfinish_partial
    else
        ui pop 1
        StartWait
        goto mfinish_partial
    endif
mcustomise =+
    set ComponentOptions = ^(Optional$(Component)$(!STF_LANGUAGE), 0)
    set DualUnInstall = {}
    set DualInstall   = {}
    ForListDo $(ComponentOptions)
        set ListItem = { #(Optional$(Component)$(!STF_LANGUAGE), $($), 1), +
                         *($($(Component)SizeList), ~($($(Component)OptionList), $($))), +
                         $($) }
        IfContains(i) $($) IN $($(Component)Install)
            set DualInstall = >($(DualInstall), $(ListItem))
        else
            set DualUnInstall = >($(DualUnInstall), $(ListItem))
        endif
    EndForListDo
    set HelpContext = $(!IDH_DB_MCUSTOMISE_INS)
    read-syms CustomiseDlg$(!STF_LANGUAGE)
    EndWait
    ui start "Customise"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        StartWait
        ifstr(i) $(ListItemsOut) == {}
            set $(Component)Install = {}
            set $(Component)Size    = 0
            set Do$(Component)      = $(!NotChosen)
        else
            set $(Component)Install = {}
            set AddList = {}
            ForListDo $(ListItemsOut)
                set $(Component)Install = >($($(Component)Install), *($($), 3))
                set AddList = >($(AddList), *($($), 2))
            EndForListDo
            install Install-SumList
            set $(Component)Size = $(Sum)
            set Do$(Component)   = $(!Chosen)
        endif
        set ReInit = YES
        ui pop 1
        EndWait
        goto mpartial_rst
    else-ifstr(i) $(DLGEVENT) == "BACK"
        set ReInit = NO
        ui pop 1
        goto mpartial_rst
    else-ifstr(i) $(DLGEVENT) == "EXIT"
        shell "subroutn.inf" QueryUserQuit $(!STF_LANGUAGE)
        ifstr(i) $($R1) == "OK"
            set Status = STATUS_USERQUIT
            ui pop 2
            StartWait
            goto mfinish_partial
        else
            goto mcustomise
        endif
    else
        ui pop 2
        StartWait
        goto mfinish_partial
    endif
mset_partial_components = +
    StartWait
    ForListDo $(ComponentList)
        set Component = $($)
        set $(Component)ToInstall = {}
        set $(Component)ToRemove  = {}
        ForListDo $($(Component)Install)
            ifcontains(i) $($) in $($(Component)Existing)
            else
                set $(Component)ToInstall = >($($(Component)ToInstall), $($))
            endif
        EndForListDo
        ForListDo $($(Component)Existing)
            ifcontains(i) $($) in $($(Component)Install)
            else
                set $(Component)ToRemove = >($($(Component)ToRemove), $($))
            endif
        EndForListDo
    EndForListDo
    set DoActualCopy = NO
    ForListDo $(ComponentList)
        set Destination = $($($)Dest)
        ifstr(i) $(Do$($)) == $(!Chosen)
            ForListDo $($($)ToInstall))
                set DoActualCopy = YES
            EndForListDo
        endif
    EndForListDo
    ifstr(i) $(DoActualCopy) == YES
        set SrcDir = $(!STF_SRCDIR)
        shell "subroutn.inf" DoAskSource $(SrcDir)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "PARTIAL.INF: shelling DoAskSource failed"
            goto mfinish_partial
        endif
        ifstr(i) $($R0) == STATUS_SUCCESSFUL
            set SrcDir = $($R1)
            ifstr(i) $($R2) != ""
                set DrivesToFree = >($(DrivesToFree), $($R2))
            endif
        else
            Debug-Output "PARTIAL.INF: User cancelled asking source."
            goto mfinish_partial
        endif
        install   Install-PartialFileCopy
        read-syms ProgressCopy$(!STF_LANGUAGE)
        EndWait
        install   Install-DoCopy
        StartWait
    endif
    ForListDo $(ComponentList)
        set Component = $($)
        set Destination = $($(Component)Dest)
        set ActuallyCopied = {}
        ForListDo $($(Component)ToInstall)
            set ComponentFile = #(Files-$(!STF_PLATFORM)-WindowsOptions, $($), 2)
            LibraryProcedure STATUS,$(!LIBHANDLE),CheckFileExistance $(Destination)"\"$(ComponentFile)
            ifstr(i) $(STATUS) == YES
                set ActuallyCopied = >($(ActuallyCopied), $($))
            endif
        EndForListDo
        set $(Component)ToInstall = $(ActuallyCopied)
    EndForListDo
    EndWait
    ForListDo $(ComponentList)
        set Component = $($)
        set Destination = $($(Component)Dest)
        ifstr(i) $($(Component)ToRemove) != {}
            set ComponentsRemoved = {}
            ForListDo $($(Component)ToRemove)
                set ComponentFile = #(Files-$(!STF_PLATFORM)-WindowsOptions, $($), 2)
                set FilePath = $(Destination)"\"$(ComponentFile)
                shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) "WARNING" $(String3)$(FilePath)
                ifstr(i) $($R1) == OK
                    LibraryProcedure STATUS,$(!LIBHANDLE), DelFile $(FilePath)
                    ifstr(i) $(STATUS) == ERROR
                        shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) NONFATAL $(String1)$(FilePath)".  "$(String2)
                    else
                        set ComponentsRemoved = >($(ComponentsRemoved), $($))
                    endif
                endif
            EndForListDo
            set $(Component)ToRemove = $(ComponentsRemoved)
        endif
    EndForListDo
    install MaintainProgmanGroups
    set Status = STATUS_SUCCESSFUL
mfinish_partial = +
    StartWait
    ForListDo $(DrivesToFree)
        LibraryProcedure STATUS,$(!LIBHANDLE), DeleteNetConnection $($) "TRUE"
    EndForListDo
    Return $(Status)
[Install-PartialFileCopy]
    set STF_VITAL = ""
    ForListDo $(ComponentList)
        set Destination = $($($)Dest)
        ifstr(i) $(Do$($)) == $(!Chosen)
            ForListDo $($($)ToInstall))
                AddSectionKeyFileToCopyList   Files-$(!STF_PLATFORM)-WindowsOptions +
                                              $($) +
                                              $(SrcDir) +
                                              $(Destination)
            EndForListDo
        endif
    EndForListDo
    exit
[Install-SumList]
    LibraryProcedure Sum, $(!LIBHANDLE), SumListItems  $(AddList)
    exit
[Install-DoCopy]
    CopyFilesInCopyList
    exit
[InstallProgramGroups]
    set Groups =  ^(ProgmanGroups, 1)
    set MainToInstall       = ^(MainItems$(!STF_PRODUCT)$(!STF_PLATFORM), 1)
    set AdminToolsToInstall = ^(AdminToolsItems$(!STF_PRODUCT), 1)
    set StartupToInstall = {}
    ForListDo $(Groups)
        set Group       = $($)
        ifstr(i) $(Group) != Startup
            ifstr(i) $($(Group)ToInstall) == {}
                goto skipgroup
            endif
        endif
        set GroupName   = #(ProgmanGroupsDescription$(!STF_LANGUAGE), $(Group), 1)
        set GroupItems  = ^($(Group)Items$(!STF_LANGUAGE), 0)
        set Destination = $($($)Dest)
        CreateProgManGroup $(GroupName) ""
        ShowProgManGroup $(GroupName), 1
        ForListDo $($(Group)ToInstall)
            Ifcontains(i) $($) in $(GroupItems)
                set ComponentFile = #($(Group)Items$(!STF_LANGUAGE), $($), 2)
                LibraryProcedure STATUS,$(!LIBHANDLE),CheckFileExistance $(Destination)"\"$(ComponentFile)
                ifstr(i) $(STATUS) == YES
                    set Item     = #($(Group)Items$(!STF_LANGUAGE), $($), 1)
                    set CmdLine  = #($(Group)Items$(!STF_LANGUAGE), $($), 3)
                    set IconFile = #($(Group)Items$(!STF_LANGUAGE), $($), 4)
                    set IconNum  = #($(Group)Items$(!STF_LANGUAGE), $($), 5)
                    CreateProgManItem $(GroupName), $(Item), $(CmdLine), $(IconFile), $(IconNum)
                endif
            endif
        EndForListDo
        ShowProgManGroup $(GroupName), 6
skipgroup = +
    EndForListDo
    ShowProgManGroup #(ProgmanGroupsDescription$(!STF_LANGUAGE), Main, 1), 4
    exit
[MaintainProgmanGroups]
    set STF_VITAL = ""
    ForListDo {Accessories, Games}
        set Group     = $($)
        ifstr(i) $($(Group)ToInstall) != {}
        else-ifstr(i) $($(Group)ToRemove) != {}
        else
            goto skip_group
        endif
        set GroupName = #(ProgmanGroupsDescription$(!STF_LANGUAGE), $(Group), 1)
        CreateProgManGroup $(GroupName), ""
        ShowProgManGroup $(GroupName), 1
        set GroupOptions = ^($(Group)Items$(!STF_LANGUAGE), 0)
        ForListDo $($(Group)ToInstall)
            ifcontains(i) $($) in $(GroupOptions)
                set Item     = #($(Group)Items$(!STF_LANGUAGE), $($), 1)
                set CmdLine  = #($(Group)Items$(!STF_LANGUAGE), $($), 3)
                set IconFile = #($(Group)Items$(!STF_LANGUAGE), $($), 4)
                set IconNum  = #($(Group)Items$(!STF_LANGUAGE), $($), 5)
                CreateProgManItem $(GroupName), $(Item), $(CmdLine), $(IconFile), $(IconNum)
            endif
        EndForListDo
        ForListDo $($(Group)ToRemove)
            ifcontains(i) $($) in $(GroupOptions)
                set Item     = #($(Group)Items$(!STF_LANGUAGE), $($), 1)
                RemoveProgManItem $(GroupName), $(Item)
            endif
        EndForListDo
        ShowProgManGroup $(GroupName), 6
skip_group = +
    EndForListDo
    exit
[ProgmanGroups]
    Main
    Accessories
    AdminTools
    Games
    Startup
[MainItemsWinntI386]
    FileManager
    ControlPanel
    PrintManager
    Clipboard
    Command
    Setup
    Pifedit
    Mail
    SchedulePlus
    CommandRefWinnt
    Intro
    readme
[MainItemsWinntMips]
    FileManager
    ControlPanel
    PrintManager
    Clipboard
    Command
    Setup
    Pifedit
    Mail16
    SchedulePlus16
    CommandRefWinnt
    Intro
    readme
[MainItemsLanmanNTI386]
    FileManager
    ControlPanel
    PrintManager
    Clipboard
    Command
    Setup
    Pifedit
    Mail
    SchedulePlus
    CommandRefAS
    Intro
    readme
[MainItemsLanmanNTMips]
    FileManager
    ControlPanel
    PrintManager
    Clipboard
    Command
    Setup
    Pifedit
    Mail16
    SchedulePlus16
    CommandRefAS
    Intro
    readme
[AdminToolsItemsWinnt]
    MiniUserManager
    DiskManager
    PerformanceMon
    Backup
    EventViewer
[AdminToolsItemsLanmanNT]
    UserManager
    ServerManager
    DiskManager
    PerformanceMon
    Backup
    EventViewer
    UserProfileEdit
[Source Media Descriptions]
    1  = "Windows NT Advanced Server Setup Disk #1"	, TAGFILE = disk1
    2  = "Windows NT Advanced Server Setup CD-ROM Disk"	, TAGFILE = disk2
[ProductType]
STF_PRODUCT  = LanmanNT
STF_PLATFORM = Mips
[Files-Mips-WindowsOptions]
Gorilla = 2,GORILLA.BAS , SIZE=29696
Money = 2,MONEY.BAS , SIZE=46592
Nibbles = 2,NIBBLES.BAS , SIZE=24576
256ColorWallpaper = 2,256COLOR.BMP , SIZE=20480
ArcadeWallpaper = 2,ARCADE.BMP , SIZE=1024
ArchesWallpaper = 2,ARCHES.BMP , SIZE=10752
ArgyleWallpaper = 2,ARGYLE.BMP , SIZE=1024
BallWallpaper = 2,BALL.BMP , SIZE=33280
CarsWallpaper = 2,CARS.BMP , SIZE=1024
CastleWallpaper = 2,CASTLE.BMP , SIZE=1024
ChitzWallpaper = 2,CHITZ.BMP , SIZE=19968
EgyptWallpaper = 2,EGYPT.BMP , SIZE=1024
HoneyWallpaper = 2,HONEY.BMP , SIZE=1024
LeavesWallpaper = 2,LEAVES.BMP , SIZE=15360
MarbleWallpaper = 2,MARBLE.BMP , SIZE=27648
RedBrickWallpaper = 2,REDBRICK.BMP , SIZE=1024
RivetsWallpaper = 2,RIVETS.BMP , SIZE=1024
SquaresWallpaper = 2,SQUARES.BMP , SIZE=1024
TartanWallpaper = 2,TARTAN.BMP , SIZE=33280
ThatchWallpaper = 2,THATCH.BMP , SIZE=1024
WinLogoWallpaper = 2,WINLOGO.BMP , SIZE=38912
ZigzagWallpaper = 2,ZIGZAG.BMP , SIZE=1024
Calculator = 2,CALC.EXE , SIZE=109568
Cardfile = 2,CARDFILE.EXE , SIZE=181248
CDPlayer = 2,CDPLAYER.EXE , SIZE=179712
CharacterMap = 2,CHARMAP.EXE , SIZE=62976
Chat = 2,WINCHAT.EXE , SIZE=97280
Clock = 2,CLOCK.EXE , SIZE=69632
Freecell = 2,FREECELL.EXE , SIZE=80384
MediaPlayer = 2,MPLAY32.EXE , SIZE=218112
Minesweeper = 2,WINMINE.EXE , SIZE=74240
Notepad = 2,NOTEPAD.EXE , SIZE=92160
Packager = 2,PACKGR32.EXE , SIZE=128512
Paintbrush = 2,PBRUSH.EXE , SIZE=376832
Solitaire = 2,SOL.EXE , SIZE=244736
SoundRecorder = 2,SNDREC32.EXE , SIZE=123392
Terminal = 2,TERMINAL.EXE , SIZE=319488
VolumeControl = 2,SNDVOL32.EXE , SIZE=117248
Write = 2,WRITE.EXE , SIZE=245248 , NODELETESOURCE
CalculatorHelp = 2,CALC.HLP , SIZE=26112
CardfileHelp = 2,CARDFILE.HLP , SIZE=37888
CDPlayerHelp = 2,CDPLAYER.HLP , SIZE=35328
CharMapHelp = 2,CHARMAP.HLP , SIZE=14848
ChatHelp = 2,WINCHAT.HLP , SIZE=21504
FreecellHelp = 2,FREECELL.HLP , SIZE=18944
MediaPlayerHelp = 2,MPLAYER.HLP , SIZE=44544
MinesweeperHelp = 2,WINMINE.HLP , SIZE=14848
NotepadHelp = 2,NOTEPAD.HLP , SIZE=25088
PackagerHelp = 2,PACKAGER.HLP , SIZE=27136
PaintbrushHelp = 2,PBRUSH.HLP , SIZE=74752
QbasicHelp = 2,QBASIC.HLP , SIZE=131072
SolitaireHelp = 2,SOL.HLP , SIZE=17408
SoundRecHelp = 2,SOUNDREC.HLP , SIZE=28672
TerminalHelp = 2,TERMINAL.HLP , SIZE=53248
WriteHelp = 2,WRITE.HLP , SIZE=52224
Canyon = 2,CANYON.MID , SIZE=34304
BezierSaver = 2,SSBEZIER.SCR , SIZE=64000
DefaultSaver = 2,SCRNSAVE.SCR , SIZE=39424
LogonSaver = 2,LOGON.SCR , SIZE=41984
MarqueSaver = 2,SSMARQUE.SCR , SIZE=55808
MysterySaver = 2,SSMYST.SCR , SIZE=58368
StarsSaver = 2,SSSTARS.SCR , SIZE=51712
Chimes = 2,CHIMES.WAV , SIZE=16384
Chord = 2,CHORD.WAV , SIZE=25088
Ding = 2,DING.WAV , SIZE=11776
Tada = 2,TADA.WAV , SIZE=28160
network = 2,NETWORK.WRI , SIZE=19456
printer = 2,PRINTER.WRI , SIZE=17920
[StringsENG]
    String1 = "Couldn't delete file "
    String2 = "You must be logged on as a member of the Administrators group to carry out this operation."
    String3 = "Setup will delete the file: "
    String4 = "Please wait while Setup determines the optional Windows NT "+
              "components to install..."
[PartialDlg_AreENG]
    DlgText     = "The following optional groups of files (components) "+
                  "are installed on your system."$(!LF)$(!LF)+
                  "To remove a component, clear its checkbox."$(!LF)$(!LF)+
                  "To install a component, check its checkbox."$(!LF)$(!LF)+
                  "To remove or install specific files within a component, "+
                  "choose Files... for that component."
[PartialDlg_CanBeENG]
    DlgText     = "The following optional groups of files (components) "+
                  "can be installed on your system."$(!LF)$(!LF)+
                  "To remove a component, clear its checkbox."$(!LF)$(!LF)+
                  "To install a component, check its checkbox."$(!LF)$(!LF)+
                  "To remove or install specific files within a component, "+
                  "choose Files... for that component."
[PartialDlgENG]
    Caption     = "Optional Windows Components"
    Continue       = "Continue"
    Cancel         = "Cancel"
    Help           = "&Help"
    Exit           = "E&xit Setup"
    CheckHeader    = "Component"
    SizeHeader     = "Bytes Used"
    Customise      = "Add/Remove Individual Files"
    Files          = "Files..."
    SpaceRequired  = "Total Disk Space Required:"
    SpaceAvailable = "Disk Space Available:"
    footer1        = "Bytes"
    DlgType     = "Check1"
    Check1Text  = #(Optional$(!STF_LANGUAGE), Readme,      2)
    Check2Text  = #(Optional$(!STF_LANGUAGE), Accessories, 2)
    Check3Text  = #(Optional$(!STF_LANGUAGE), Games,       2)
    Check4Text  = #(Optional$(!STF_LANGUAGE), Savers,      2)
    Check5Text  = #(Optional$(!STF_LANGUAGE), Wallpapers,  2)
    SizeAvailable  = $(FreeForOptional)
    CheckItemsIn      = { $(DoReadme), $(DoAccessories), +
                          $(DoGames),  $(DoSavers) +
                          $(DoWallpapers) }
    CheckItemsInSizes = { $(ReadmeSize), $(AccessoriesSize), +
                          $(GamesSize),  $(SaversSize), +
                          $(WallpapersSize) }
    OptionsGreyed     = {}
[CustomiseDlgENG]
    Caption     = "Customize "#(Optional$(!STF_LANGUAGE), $(Component), 1)
    DlgText     = "To install files, select files on the left, then choose Add."$(!LF)$(!LF)+
                  "To remove files, select files on the right, then choose Remove."$(!LF)$(!LF)+
                  "When finished selecting, choose OK."
    Continue    = "OK"
    Cancel      = "Cancel"
    Help        = "&Help"
    Exit        = "E&xit Setup"
    Add         = "&Add -->"
    Remove      = "&Remove <--"
    AddAll      = "A&dd All -->"
    List1Header = "Do &not install these files:"
    List2Header = "&Install these files on the hard disk:"
    footer1      = "file(s) selected:"
    footer2      = "Bytes"
    footer3      = "Total Disk Space Required:"
    DlgType     = "Dual1"
    DlgTemplate = "CUSTOMISE"
    HelpContext = $(!IDH_DB_CUSTOMISE_INS)
    ListItemsIn  = $(DualUnInstall)
    ListItemsOut = $(DualInstall)
[ProgressCopyENG]
    ProCaption   = "Windows NT Setup"
    ProCancel    = "Cancel"
    ProCancelMsg = "Windows NT is not correcly installed.  Are you sure you want "+
                   "to cancel copying files?"
    ProCancelCap = "Setup Message"
    ProText1     = "Copying:"
    ProText2     = "To:"
[OptionalENG]
    Readme         = "Readme Files",         "Readme &Files"
    Accessories    = "Accessories",          "&Accessories"
    Games          = "Games",                "&Games"
    Savers         = "Screen Savers",        "Screen &Savers"
    Wallpapers     = "Wallpapers, Misc.",    "&Wallpapers, Misc."
[OptionalReadmeENG]
    network	    = "Network Read Me"
    printer	    = "Printer Read Me"
[OptionalAccessoriesENG]
    Calculator      = "Calculator"
    Cardfile        = "Cardfile"
    Clock           = "Clock"
    Notepad         = "Notepad"
    Paintbrush      = "Paintbrush"
    Chat      = "Chat"
    Terminal        = "Terminal"
    CharacterMap    = "Character Map"
    SoundRecorder   = "Sound Recorder"
    VolumeControl   = "Volume Control"
    MediaPlayer     = "Media Player"
    CDPlayer        = "CD Player"
    Write           = "Write"
    CalculatorHelp  = "Calculator Help"
    CardfileHelp    = "Cardfile Help"
    NotepadHelp     = "Notepad Help"
    PaintbrushHelp  = "Paintbrush Help"
    Gorilla     = "Quick Basic Program (Gorilla)"
    Money           = "Quick Basic Program (Money)"
    Nibbles     = "Quick Basic Program (Nibbles)"
    ChatHelp    = "Chat Help"
    CDPlayerHelp        = "CD Player Help"
    TerminalHelp    = "Terminal Help"
    Packager = "Object Packager"
    PackagerHelp = "Object Packager Help"
    QbasicHelp = "Quick Basic Help"
    CharMapHelp     = "Character Map Help"
    SoundRecHelp    = "Sound Recorder Help"
    MediaPlayerHelp = "Media Player Help"
    WriteHelp       = "Write Help"
[OptionalGamesENG]
    Solitaire       = "Solitaire"
    Minesweeper     = "Minesweeper"
    Freecell        = "Freecell"
    SolitaireHelp   = "Solitaire Help"
    MinesweeperHelp = "Minesweeper Help"
    FreecellHelp    = "Freecell Help"
[OptionalSaversENG]
    BezierSaver     = "Bezier Screen Saver"
    DefaultSaver    = "Blank Screen Saver"
    LogonSaver      = "Logon Screen Saver"
    MarqueSaver     = "Marquee Screen Saver"
    MysterySaver    = "Mystery Screen Saver"
    StarsSaver      = "Stars Screen Saver"
[OptionalWallpapersENG]
    256ColorWallpaper = "256-Color Wallpaper"
    ArcadeWallpaper   = "Arcade Wallpaper"
    ArchesWallpaper   = "Arches Wallpaper"
    ArgyleWallpaper   = "Argyle Wallpaper"
    BallWallpaper     = "Ball Wallpaper"
    CarsWallpaper     = "Cars Wallpaper"
    CastleWallpaper   = "Castle Wallpaper"
    ChitzWallpaper    = "Chitz Wallpaper"
    EgyptWallpaper    = "Egypt Wallpaper"
    HoneyWallpaper    = "Honey Wallpaper"
    LeavesWallpaper   = "Leaves Wallpaper"
    MarbleWallpaper   = "Marble Wallpaper"
    RedBrickWallpaper = "Red Brick Wallpaper"
    RivetsWallpaper   = "Rivets Wallpaper"
    SquaresWallpaper  = "Squares Wallpaper"
    TartanWallpaper   = "Tartan Wallpaper"
    ThatchWallpaper   = "Thatch Wallpaper"
    WinLogoWallpaper  = "Windows Logo Wallpaper"
    ZigzagWallpaper   = "Zigzag Wallpaper"
    Canyon = "Canyon MIDI Song"
    Chimes = "Chimes Sound"
    Chord = "Chord Sound"
    Ding = "Ding Sound"
    Tada = "Tada Sound"
[ProgmanGroupsDescriptionENG]
    Main        = "Main"
    Accessories = "Accessories"
    Games       = "Games"
    Startup     = "Startup"
    AdminTools  = "Administrative Tools"
[MainItemsENG]
    FileManager     = "File Manager",             WINFILE.EXE   ,  WINFILE.EXE               , ""            ,  0
    Mail            = "Mail",                     MSMAIL32.EXE  ,  MSMAIL32.EXE              , ""            ,  0
    Mail16          = "Mail",                     MSMAIL32.EXE  ,  MSMAIL32.EXE               , ""            ,  0
    SchedulePlus    = "Schedule+",                SCHDPL32.EXE  ,  SCHDPL32.EXE              , ""            ,  0
    SchedulePlus16  = "Schedule+",                SCHDPL32.EXE  ,  SCHDPL32.EXE       , ""            ,  0
    ControlPanel    = "Control Panel",            CONTROL.EXE   ,  CONTROL.EXE               , ""            ,  0
    PrintManager    = "Print Manager",            PRINTMAN.EXE  ,  PRINTMAN.EXE              , ""            ,  0
    Clipboard       = "ClipBook Viewer",          CLIPBRD.EXE   ,  CLIPBRD.EXE               , ""            ,  0
    Command         = "Command Prompt",           CMD.EXE       ,  CMD.EXE                   , "progman.exe" , 10
    Setup           = "Windows NT Setup",         SETUP.EXE     ,  SETUP.EXE                 , ""            ,  0
    Pifedit         = "PIF Editor",               PIFEDIT.EXE   ,  PIFEDIT.EXE               , ""            ,  0
    CommandRefWinnt = "Windows NT Help",          WINHLP32.EXE  ,  "WINHLP32.EXE "$(!STF_WINDOWSSYSPATH)"\WINNT.HLP" ,    "" , 0
    CommandRefAS    = "Windows NT Help",         WINHLP32.EXE   ,  "WINHLP32.EXE "$(!STF_WINDOWSSYSPATH)"\WINNT.HLP" , "" , 0
    Intro           = "Introducing Windows NT",   INTRO.EXE     ,  $(!STF_WINDOWSSYSPATH)\INTRO.EXE ,  "intro.ico"   ,  0
    readme	    = "Read Me",		  readme.wri	,  readme.wri		     , ""	     ,	0
[AccessoriesItemsENG]
    Paintbrush      = "Paintbrush",      PBRUSH.EXE   , PBRUSH.EXE    , "" ,  0
    Chat            = "Chat",            WINCHAT.EXE  , WINCHAT.EXE   , "" ,  0
    Terminal        = "Terminal",        TERMINAL.EXE , TERMINAL.EXE  , "" ,  0
    Notepad         = "Notepad",         NOTEPAD.EXE  , NOTEPAD.EXE   , "" ,  0
    Cardfile        = "Cardfile",        CARDFILE.EXE , CARDFILE.EXE  , "" ,  0
    Calculator      = "Calculator",      CALC.EXE     , CALC.EXE      , "" ,  0
    Clock           = "Clock",           CLOCK.EXE    , CLOCK.EXE     , "" ,  0
    CharacterMap    = "Character Map",   CHARMAP.EXE  , CHARMAP.EXE   , "" ,  0
    MediaPlayer     = "Media Player",    MPLAY32.EXE  , MPLAY32.EXE   , "" ,    0
    SoundRecorder   = "Sound Recorder",  SNDREC32.EXE , SNDREC32.EXE  , "" ,    0
    VolumeControl   = "Volume Control",  SNDVOL32.EXE , SNDVOL32.EXE  , "" ,  0
    CDPlayer        = "CD Player",       CDPLAYER.EXE , CDPLAYER.EXE  , "" ,  0
    Write           = "Write",           WRITE.EXE    , WRITE.EXE     , "" ,  0
    Packager        = "Object Packager", PACKGR32.EXE , PACKGR32.EXE  , "" ,  0
[AdminToolsItemsENG]
    UserManager     = "User Manager for Domains", USRMGR.EXE   , USRMGR.EXE   , "" ,  0
    ServerManager   = "Server Manager",           SRVMGR.EXE   , SRVMGR.EXE   , "" ,  0
    MiniUserManager = "User Manager",             MUSRMGR.EXE  , MUSRMGR.EXE  , "" ,  0
    DiskManager     = "Disk Administrator",       WINDISK.EXE  , WINDISK.EXE  , "" ,  0
    PerformanceMon  = "Performance Monitor",      PERFMON.EXE  , PERFMON.EXE  , "" ,  0
    Backup          = "Backup",                   NTBACKUP.EXE , NTBACKUP.EXE , "" ,  0
    EventViewer     = "Event Viewer",             EVENTVWR.EXE , EVENTVWR.EXE , "" ,  0
    UserProfileEdit = "User Profile Editor",      UPEDIT.EXE   , UPEDIT.EXE   , "" ,  0
[GamesItemsENG]
    Solitaire       = "Solitaire",           SOL.EXE       , SOL.EXE       , ""           ,  0
    Minesweeper     = "Minesweeper",         WINMINE.EXE   , WINMINE.EXE   , ""           ,  0
    Freecell        = "Freecell",            FREECELL.EXE  , FREECELL.EXE  , ""           ,  0
[StartupItemsENG]



