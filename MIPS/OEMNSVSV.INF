[Identification]
    OptionType = NetService
[Options]
    SRV
[FileConstants]
UtilityInf      = "UTILITY.INF"
subroutineinf   = "SUBROUTN.INF"
SoftwareType    = "service"
Exit_Code       = 0
NetEventDLL     = "%SystemRoot%\System32\netevent.dll"
IoLogMsgDLL     = "%SystemRoot%\System32\IoLogMsg.dll"
Manufacturer    = "Microsoft"
ProductMajorVersion     = "3"
ProductMinorVersion     = "1"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)
ProductSRVName          = "LanmanServer"
ProductSRVImagePath     = "%SystemRoot%\System32\lmsvcs.exe"
NetRuleSRVType          = "srv lmNetService lanmanServer"
NetRuleSRVClass         = {"lanmanServer lmNetService"}
NetRuleSRVUse           = $(SoftwareType)" yes yes"
NetRuleSRVBindForm      = """LanmanServer"" yes yes container"
ProductXACTSRVName      = "XactSrv"
ProductXACTSRVImagePath = "%SystemRoot%\System32\lmsvcs.exe"
ProductSRVSRVName       = "Srv"
ProductSRVSRVImagePath  = "\SystemRoot\System32\drivers\srv.sys"
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(Product$(Option)Name)"\CurrentVersion"
ParamKeyName    = $(!NTN_ServiceBase)"\"$(Product$(Option)Name)"\Parameters"
SessMgrMemMgtKeyName =  "SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management"
[GeneralConstants]
from      = ""
to        = ""
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2
KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""
TRUE            = 1
FALSE           = 0
NoTitle            = 0
ExitState   = "Active"
OldVersionExisted = $(FALSE)
DriverPath      = $(!STF_NTPATH)\drivers
[date]
    Now = {} ? $(!LIBHANDLE) GetSystemDate
[DetectSystemMemory]
    SystemMemory    = "" ? $(!LIBHANDLE) GetMemorySize
[Identify]
    read-syms Identification
    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)
    Return $(Status) $(Identifier) $(Media)
[ReturnOptions]
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        goto returnoptions
    else
        set Status = STATUS_NOLANGUAGE
        goto finish_ReturnOptions
    endif
returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL
finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)
[InstallOption]
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif
    Debug-Output "OEMNSVSV.INF: STF_CWDDIR is: "$(!STF_CWDDIR)
    Debug-Output "OEMNSVSV.INF: STF_LANGUAGE is: "$(!STF_LANGUAGE)
    set-subst LF = "\n"
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = $(OK)
    endif
    read-syms FileConstants$(!STF_LANGUAGE)
    detect date
    detect DetectSystemMemory
    set-title  $(FunctionTitle)
    set to   = Begin
    set from = Begin
    set CommonStatus = STATUS_SUCCESSFUL
    EndWait
Begin = +
    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
                set OEM_ABANDON_OPTIONS = { $(ProductSRVName), +
            $(ProductXACTSRVName), $(ProductSRVSRVName)}
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        set CommonStatus = STATUS_REBOOT
        set StartLabel = configureadapter
    else
        set StartLabel = installadapter
                set OEM_ABANDON_OPTIONS = {}
    endif
    ifstr(i) $(!STF_PRODUCT) == "LANMANNT"
        set Size = 3
    else
        set Size = 2
    endif
    set RadioDefault = $(Size)
    set RadioIn = {$(RadioDefault)}
    set Lmannounce = 0
    set CheckItemsIn = {OFF}
    set DoSRV = FALSE
    set DoXACTSRV = FALSE
    set DoSRVSRV = FALSE
    ifstr(i) $(Option) == SRV
                set DoSRV = TRUE
        set DoSRVSRV = TRUE
    else-ifstr(i) $(Option) == XACTSRV
                set DoXACTSRV = TRUE
    endif
    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)
installadapter = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
        CloseRegKey $(KeyProduct)
        Shell $(UtilityInf), VerExistedDlg, $(Product$(Option)Title),+
            $(ProductVersion)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error: cannot get an error string."
            goto ShellCodeError
        endif
        goto end
    endif
    goto adapteroptions
configureadapter = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ParamKeyName) $(MAXIMUM_ALLOWED) KeyParameters
    Ifstr $(KeyParameters) == $(KeyNull)
        set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
        Debug-Output "Cannot find component service"
        goto fatalregistry
    endif
    set OldVersionExisted = $(TRUE )
    set ValueName = ""
    set ValueData = ""
    set ValueStr  = ""
    set ValueList = {}
    EnumRegValue $(KeyParameters) ValueList
    ForListDo $(ValueList)
        set ValueItem = $($)
        set ValueName = *($(ValueItem),1)
        set ValueData = *($(ValueItem),4)
        Ifstr(i) $(ValueName) == "Size"
            set Size = $(ValueData)
        else-ifstr(i) $(ValueName) == "Lmannounce"
            set Lmannounce = $(ValueData)
        endif
    EndForListDo
    set LargeSystemCacheOrg = 2
    OpenRegKey $(!REG_H_LOCAL) "" $(SessMgrMemMgtKeyName) $(MAXIMUM_ALLOWED) KeySessMgrMemMgt
    Ifstr $(KeySessMgrMemMgt) != $(KeyNull)
        GetRegValue $(KeySessMgrMemMgt), "LargeSystemCache", LSCInfo
        Debug-Output "GetRegValue returned "$(RegLastError)
        ifint $(RegLastError) == $(!REG_ERROR_SUCCESS)
            Debug-Output "GetRegValue of LargeSystemCache successful"
            set LargeSystemCacheOrg = *($(LSCInfo), 4)
            Debug-Output "LargeSystemCacheOrg ="$(LargeSystemCacheOrg)
            ifint $(Size) == 3
                ifint $(LargeSystemCacheOrg) == 0
                    set Size = 4
                endif
            endif
        endif
        CloseRegKey $(KeySessMgrMemMgt)
    endif
    set RadioDefault = $(Size)
    set RadioIn = {$(RadioDefault)}
    ifint $(Lmannounce) == 1
        set CheckItemsIn = {ON}
    else
        set CheckItemsIn = {OFF}
    endif
    CloseRegKey $(KeyParameters)
    goto adapteroptions
adapteroptions = +
    ifstr(i) $(DoSRV) == TRUE
        Ifstr(i) $(!NTN_InstallMode) == "configure"
            set from = adapteroptions
            read-syms FileDependentDlg$(!STF_LANGUAGE)
            ui start "InputDlg"
            ifstr(i) $(DLGEVENT) == "CONTINUE"
                set Size = *($(RadioOut),1)
                Debug-Output "OEMNSVSV.INF: Size = "$(Size)
                set Lmannounce = *($(CheckItemsOut),1)
                Debug-Output "OEMNSVSV.INF: Lmannounce = "$(Lmannounce)
                ui pop 1
                goto nextstep
            else-ifstr(i) $(DLGEVENT) == "BACK"
                set CommonStatus = STATUS_USERCANCEL
                Debug-Output "Action: exit. Bye."
                ui pop 1
                goto end
            else
                ui pop 1
                Debug-Output "OEMNSVSV.INF: Action unknown. Bye."
                goto end
            endif
        endif
    endif
nextstep = +
    StartWait
    ifstr(i) $(!NTN_InstallMode) == "install"
        Ifstr(i) $(DoCopy) == "YES"
           Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES
           Ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Goto ShellCodeError
           Else-Ifstr(i) $($R0) == STATUS_FAILED
               Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                   goto ShellCodeError
               endif
               set Error = $($R0)
               Goto fatal
           Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
               Goto successful
           Endif
           Set SrcDir = $($R1)
        Endif
        install "Install-Option"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
           Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               goto ShellCodeError
           endif
           set Error = $($R0)
           goto fatal
        endif
    endif
    set OEM_ABANDON_ON  = TRUE
    ifstr(i) $(DoSRV) == TRUE
        ifint $(OldVersionExisted) == $(FALSE)
            CloseRegKey $(KeyParameters)
            Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductSRVName))
            Set SrvServiceType = "autoserviceshare"
            Ifint $(SystemMemory) < 12096
                Set SrvServiceType = "serviceshare"
            Endif
            Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
                $(ProductSRVName), +
                $(ProductSRVName), +
                $(ProductSRVDisplayName), $(STF_CONTEXTINFNAME), +
                $(ProductSRVImagePath), $(SrvServiceType), "", {}, "", +
                $(NetEventDLL),"","","","server"
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error"
                goto ShellCodeError
            endif
            set RegistryErrorIndex = $($R0)
            Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                EndWait
                Debug-Output "Registry error: add software components"
                CloseRegKey $($R1)
                CloseRegKey $($R2)
                CloseRegKey $($R3)
                CloseRegKey $($R4)
                goto fatalregistry
            endif
            Set SoftProductKey  = $($R1)
            Set SoftNetRuleKey  = $($R2)
            Set SoftServiceKey  = $($R3)
            set KeyParameters   = $($R4)
            Set SoftLinkageKey  = $($R5)
            set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                               {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                               {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                               {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductSRVTitle)},+
                               {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSRVDescription)},+
                               {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductSRVName)},+
                               {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
            Shell  $(UtilityInf), AddValueList, $(SoftProductKey), $(NewValueList)
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error."
                goto ShellCodeError
            endif
            set RegistryErrorIndex = $($R0)
            Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                EndWait
                Debug-Output "Resgitry error: add value list."
                CloseRegKey $(SoftProductKey)
                CloseRegKey $(SoftNetRuleKey)
                CloseRegKey $(SoftServiceKey)
                CloseRegKey $(KeyParameters)
                CloseRegKey $(SoftLinkageKey)
                goto fatalregistry
            endif
            set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSRVType)},+
                                {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSRVClass)}, +
                                {use,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSRVUse)}, +
                                {bindform,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSRVBindForm)}, +
                                {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}
            Shell  $(UtilityInf), AddValueList, $(SoftNetRuleKey), $(NewValueList)
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error."
                goto ShellCodeError
            endif
            set RegistryErrorIndex = $($R0)
            CloseRegKey $(SoftProductKey)
            CloseRegKey $(SoftNetRuleKey)
            Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                EndWait
                Debug-Output "OEMNSVSV.INF: Registry error: add value list."
                CloseRegKey $(KeyParameters)
                CloseRegKey $(SoftLinkageKey)
                goto fatalregistry
            endif
            Set NewValueList = {{OtherDependencies,$(NoTitle),$(!REG_VT_MULTI_SZ),{"Srv"}}}
            Shell  $(UtilityInf), AddValueList, $(SoftLinkageKey), $(NewValueList)
            CloseRegKey $(SoftLinkageKey)
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error."
                goto ShellCodeError
            endif
            set RegistryErrorIndex = $($R0)
            Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                    EndWait
                Debug-Output "OEMNSVSV.INF: Registry error: add value list."
                CloseRegKey $(SoftServiceKey)
                goto fatalregistry
            endif
            CreateRegKey $(SoftServiceKey) {"AutotunedParameters",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" AutoTunedKey
            CreateRegKey $(SoftServiceKey) {"Shares",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" SharesKey
            CloseRegKey $(SoftServiceKey)
            CloseRegKey $(AutoTunedKey)
            CloseRegKey $(SharesKey)
        endif
        goto writeparameters
writeparameters = +
        ifstr(i) $(Lmannounce) == "ON"
            set LmannounceValue = 1
        else
            set LmannounceValue = 0
        endif
        ifint $(Size) == 4
            set LargeSystemCache = 0
            set Size = 3
        else-ifint $(Size) == 3
            set LargeSystemCache = 1
        else
            set LargeSystemCache = 0
        endif
        set NewValueList = {{Size,$(NoTitle),$(!REG_VT_DWORD),$(Size)},+
                           {Lmannounce,$(NoTitle),$(!REG_VT_DWORD),$(LmannounceValue)} }
        ifint $(OldVersionExisted) == $(TRUE)
            OpenRegKey $(!REG_H_LOCAL) "" $(ParamKeyName) $(MAXIMUM_ALLOWED) KeyParameters
        endif
        Shell  $(UtilityInf), AddValueList, $(KeyParameters), $(NewValueList)
        set RegistryErrorIndex = $($R0)
        CloseRegKey $(KeyParameters)
        Ifstr(i) $(RegistryErrorIndex) !=  NO_ERROR
            goto fatalregistry
        endif
        ifint $(LargeSystemCache) != $(LargeSystemCacheOrg)
            OpenRegKey $(!REG_H_LOCAL) "" $(SessMgrMemMgtKeyName) $(MAXIMUM_ALLOWED) KeySessMgrMemMgt
            SetRegValue $(KeySessMgrMemMgt) {LargeSystemCache,$(NoTitle),$(!REG_VT_DWORD),$(LargeSystemCache)}
            ifint $(RegLastError) != $(!REG_ERROR_SUCCESS)
                set RegistryErrorIndex = UNABLE_WRITE_REGISTRY
                CloseRegKey $(KeySessMgrMemMgt)
                goto fatalregistry
            endif
            CloseRegKey $(KeySessMgrMemMgt)
        endif
    endif
    ifstr(i) $(DoXACTSRV) == TRUE
        ifint $(OldVersionExisted) == $(FALSE)
            Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductXACTSRVName))
            Shell $(UtilityInf), CreateService, $(ProductXACTSRVName), +
                $(ProductXACTDisplayName), $(ProductXACTSRVImagePath), "serviceshare", "", +
                {"LanmanServer"}, ""
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error"
                goto ShellCodeError
            endif
            set RegistryErrorIndex = $($R0)
            CloseRegKey $($R1)
            CloseRegKey $($R2)
            CloseRegKey $($R3)
            Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                EndWait
                Debug-Output "Registry error: adding XACTSRV service"
                goto fatalregistry
            endif
        endif
    endif
    ifstr(i) $(DoSRVSRV) == TRUE
        ifint $(OldVersionExisted) == $(FALSE)
            Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductSRVSRVName))
            Shell $(UtilityInf), CreateService, $(ProductSRVSRVName), +
                $(ProductSRVSRVDisplayName), $(ProductSRVSRVImagePath), "system", "Network", {}, "",+
                $(NetEventDLL)
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error"
                goto ShellCodeError
            endif
            set RegistryErrorIndex = $($R0)
            CloseRegKey $($R1)
            CloseRegKey $($R2)
            CloseRegKey $($R3)
            Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                EndWait
                Debug-Output "Registry error: adding Srv service"
                goto fatalregistry
            endif
        endif
    endif
    EndWait
    goto successful
bindingadapter =+
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal
removeadapter = +
    ifcontains(i) $(ProductSRVName) in $(OEM_ABANDON_OPTIONS)
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
           $(ProductSRVName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
           Debug-Output "ShellCode error"
           goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
           goto fatalregistry
        endif
    endif
    ForListDo  {$(ProductXACTSRVName), $(ProductSRVSRVName)}
        ifcontains(i) $($) in $(OEM_ABANDON_OPTIONS)
           Shell $(UtilityInf), RemoveService, $($), "YES"
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "ShellCode error"
               goto ShellCodeError
           endif
           set RegistryErrorIndex = $($R0)
           Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
               goto fatalregistry
           endif
        endif
    EndForListDo
    goto end
UpgradeSoftware = +
    ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
        Ifstr $(KeyProduct) != $(KeyNull)
            GetRegValue $(KeyProduct),"MajorVersion", VersionInfo
            set Version = *($(VersionInfo), 4)
            Shell $(UtilityInf), GetInfFileNameFromRegistry, $(KeyProduct)
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error"
                goto ShellCodeError
            endif
            set !UG_Filename = $($R0)
            ifstr(i) $(!UG_Filename) != ""
                install "Install-Update"
                ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
                    goto fatal
                endif
            endif
            SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
            SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
            ifint $(Version) != $(ProductVersion)
            endif
            CloseRegKey $(KeyProduct)
        else
            goto fatalregistry
        endif
    endif
    goto end
successful = +
    goto end
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
        goto "end"
    endif
nonfatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "NONFATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto "end"
    endif
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    goto setfailed
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = $(ShellCodeErrorTitle)
    set STF_MB_TEXT  = $(ShellCodeErrorText) 
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed
setfailed = +
    set CommonStatus = STATUS_FAILED
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto removeadapter
    endif
    goto end
end = +
    goto term
term = +
    Return $(CommonStatus)
[Install-Option]
    set STF_VITAL = ""
    ifstr(i) $(AddCopy) == "YES"
        AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
    endif
    ifstr(i) $(DoCopy) == "YES"
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList
    endif
    ifstr(i) $(DoConfig) == "YES"
    endif
    Exit
[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
   AddSectionFilesToCopyList Files-Inf $(SrcDir) $(!STF_WINDOWSSYSPATH)
   set !STF_NCPA_FLUSH_COPYLIST = TRUE
   CopyFilesInCopyList
   exit
[Source Media Descriptions]
    1  = "Windows NT Advanced Server Setup Disk #1"	, TAGFILE = disk1
    2  = "Windows NT Advanced Server Setup CD-ROM Disk"	, TAGFILE = disk2
[ProductType]
STF_PRODUCT  = LanmanNT
STF_PLATFORM = Mips
[Files-Inf]
2,	oemsetup.inf,	 SIZE=1000,	RENAME=$(!UG_Filename)
[Files-SRV]
2,SRV.SYS , SIZE=283648
[LanguagesSupported]
    ENG
[OptionsTextENG]
    SRV         = "Server"
[FileConstantsENG]
ProCaption   = "Windows NT Setup"
ProCancel    = "Cancel"
ProCancelMsg = "Windows NT Networking is not correctly installed.  "+
               "Are you sure you want to cancel copying files?"
ProCancelCap = "Network Setup Message"
ProText1     = "Copying:"
ProText2     = "To:"
FunctionTitle   = "Server"
ProductSRVDescription           = "Microsoft Windows Server Service"
ProductXACTSRVDescription       = "Microsoft LAN Manager Translator Service"
ProductSRVDisplayName   = "Server"
ProductSRVTitle         = "Server"
ProductXACTDisplayName  = "XactSrv"
ProductSRVSRVDisplayName       = "Srv"
ShellCodeErrorTitle     = "Error: "$(FunctionTitle)
ShellCodeErrorText      = "Shell Code Error."
[DialogConstantsENG]
Help        = "&Help"
Exit        = "Cancel"
OK          = "OK"
HelpContext = ""
Continue    = "Continue"
Cancel      = "Cancel"
[FileDependentDlgENG]
GroupLabel = "Optimization:"
Radio1 = "&Minimize Memory Used"
Radio2 = "&Balance"
Radio3 = "M&aximize Throughput for File Sharing"
Radio4 = "Ma&ximize Throughput for Network Applications"
CheckBox1 = "Ma&ke Browser Broadcasts to LAN Manager 2.x Clients"
DlgType = "RadioCombination"               
DlgTemplate = "LMSERVER"       
Caption = $(FunctionTitle)
EditTextIn = ""
EditTextLim = ""
CBOptionsGreyed = {}
ComboListItemsOut = {}
OptionsGreyed = {}
HelpContext = $(!IDH_DB_OEMNSVSV_INS)



