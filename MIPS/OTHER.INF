[Options]
    Computer            = cpt
    Video               = vio
    Pointer             = ptr
    Keyboard            = kbd
    Layout              = lay
    Language            = lng
    Printer             = prn
    Scsi                = scs
    Tape                = tap
    Sound               = snd
    Driver              = drv
    NetAdapter          = nad
    NetDriver           = ndr
    NetTransport        = nxp
    NetService          = nsv
    Network             = nwk
    NetProvider         = npr
[OemOptionFiles]
    OemFiles = {} ? $(!LIBHANDLE) FindFileInstances $(!STF_WINDOWSSYSPATH)"\oem"$(Abb)"*.inf"
[ReturnOemOptions]
    set Status         = STATUS_FAILED
    set OemOptionList  = {}
    set Abb = #(Options, $($1), 1)
    read-syms OemOptionFiles
    detect OemOptionFiles
    ForListDo $(OemFiles)
        set OemFileName = $(!STF_WINDOWSSYSPATH)"\"$($)
        set Found = FALSE
        shell "", GetOptionsFromINF $($0) $($1) $(OemFileName)
        ifstr(i) $($R0) == STATUS_SUCCESSFUL
            ForListDo $(OemOptionList)
                ifstr(i) *($($), 2) == $($R1)
                    set Found = TRUE
                endif
            EndForListDo
            ifstr(i) $(Found) == FALSE
                set OemOptionList = >($(OemOptionList), {$($), $($R1), $($R2)})
            endif
        endif
    EndForListDo
    set Status = STATUS_SUCCESSFUL
finish_GetCurrentOemOptions = +
    Return $(Status) $(OemOptionList)
[GetOptionsFromINF]
    set Status         = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}
    set FileToCheck = $($2)
    install Install-SeeIfFileIsPresent
    ifstr(i) $(STATUS) != "YES"
        set Status = STATUS_INFNOTFOUND
        goto finish_GetOptionsFromINF
    endif
    shell $($2) Identify
    ifstr(i) $($R0) == "STATUS_SUCCESSFUL"
        ifstr(i) $($R1) == $($1)
            shell $($2) ReturnOptions $($0) $(!STF_BUSTYPE)
            ifstr(i) $($R0) == STATUS_SUCCESSFUL
                 set  OptionList     = $($R1)
                 set  OptionTextList = $($R2)
                 set  Status         = STATUS_SUCCESSFUL
                 goto finish_GetOptionsFromINF
            endif
        endif
    endif
finish_GetOptionsFromINF = +
    Return $(Status) $(OptionList) $(OptionTextList)
[GetNewOEMOption]
    set Status            = STATUS_FAILED
    set Option            = $($2)
    set OptDisketteSrc    = $($3)
    set OptDiskette       = #(OptionDiskettes$($0), $($2), 1)
    set InfName1          = "OEMSETUP.INF"
    set InfName2          = "OEMSETNT.INF"
    set Abb = #(Options, $(Option), 1)
    set NewOemOptionList  = $($1)
    set OptionChosen      = ""
    set OptionChosenText  = ""
ask_dodiskette = +
    set InfName = $(InfName1)
    shell "" DoDiskette $($0) $(OptDiskette) $(OptDisketteSrc)
    set Status = STATUS_FAILED
    ifstr(i) $($R0) == STATUS_USERCANCEL
        set Status = STATUS_USERCANCEL
        goto finish_GetOEMOption
    else-ifstr(i) $($R0) == STATUS_FAILED
        goto finish_GetOEMOption
    endif
    set OptDisketteSrc = $($R1)
ask_inf_retry = +
    FlushInf $(InfName)
    LibraryProcedure FileToCheck, $(!LIBHANDLE), AppendBackSlash $(OptDisketteSrc)
    set FileToCheck = $(FileToCheck)$(InfName)
    install Install-SeeIfFileIsPresent
    set OemSetupFilePath = $(FileToCheck)
    set NfError = 1
    ifstr(i) $(STATUS) == YES
        set NfError = 2
        shell $(OemSetupFilePath) Identify
        ifstr(i) $($R0) == "STATUS_SUCCESSFUL"
            ifstr(i) $($R1) == $(Option)
                shell $(OemSetupFilePath) ReturnOptions $($0) $(!STF_BUSTYPE)
                ifstr(i) $($R0) == STATUS_SUCCESSFUL
                     set OemList     = $($R1)
                     set OemTextList = $($R2)
                     goto asksingleselection
                endif
            endif
        endif
    endif
    ifstr(i) $(InfName) == $(InfName1)
        Set InfName = $(InfName2)
        goto ask_inf_retry
    endif
    read-syms NonFatalError$(NfError)$($0)
    shell "subroutn.inf" SetupMessage $($0) "NONFATAL" $(NonFatal)
    goto ask_dodiskette
asksingleselection = +
    shell "" DoSingleOption $(OemList) $(OemTextList) $(OptDiskette)
    ifstr(i) $($R0) == STATUS_FAILED
        set Status = STATUS_FAILED
        goto finish_GetOEMOption
    else-ifstr(i) $($R0) == STATUS_USERCANCEL
        set Status = STATUS_USERCANCEL
        goto finish_GetOEMOption
    endif
    set OptionChosen     = $($R1)
    set OptionChosenText = $($R2)
    set Duplicate = FALSE
    ForListDo $($1)
        ifstr(i) *($($), 2) == $(OemList)
            set OemFileName = *($($), 1)
            set Duplicate = TRUE
            FlushInf $(OemFileName)
            goto copyinf
        endif
    EndForListDo
    set Num = 0
nextinf = +
    ifint $(Num) < 99
        set OemFileName = "oem"$(Abb)$(Num)".inf"
        set FileToCheck = $(!STF_WINDOWSSYSPATH)"\"$(OemFileName)
        install Install-SeeIfFileIsPresent
        ifstr(i) $(STATUS) == "YES"
            set-add Num = $(Num) 1
            goto nextinf
        else
            goto copyinf
        endif
    endif
    goto finish_GetOEMOption
copyinf = +
    set OemSrc = $(OemSetupFilePath)
    set OemDst = $(!STF_WINDOWSSYSPATH)"\"$(OemFileName)
    install Install-OemINF
    ifstr(i) $(Duplicate) == TRUE
    else
        set NewOemOptionList = >($(NewOemOptionList), {$(OemFileName), $(OemList), $(OemTextList)})
    endif
    set Status = STATUS_SUCCESSFUL
finish_GetOEMOption = +
    FlushInf $(InfName)
    Return $(Status) $(NewOemOptionList) $(OptionChosen) $(OptionChosenText) $(OptDisketteSrc)
[GetNewOEMMultiOption]
    Debug-Output $(STF_CONTEXTINFNAME)": GetNewOEMMultiOption called"
    set Status            = STATUS_FAILED
    set OptionType        = ""
    set OptionTypeList    = $($2)
    set OptDisketteSrc    = $($3)
    set InfName1          = "OEMSETUP.INF"
    set InfName2          = "OEMSETNT.INF"
    read-syms OptionDisketteMulti$($0)
    Set TypeNames = ^(Options,0)
    Set TypeAbbs  = ^(Options,1)
    set NewOemOptionList  = $($1)
    set OptionChosen      = ""
    set OptionChosenText  = ""
m_ask_dodiskette = +
    Debug-Output $(STF_CONTEXTINFNAME)": GetNewOEMMultiOption shelling DoDiskette"
    set InfName = $(InfName1)
    shell "" DoDiskette $($0) $(OptDiskette) $(OptDisketteSrc)
    set Status = STATUS_FAILED
    ifstr(i) $($R0) == STATUS_USERCANCEL
        set Status = STATUS_USERCANCEL
        goto m_finish_GetOEMOption
    else-ifstr(i) $($R0) == STATUS_FAILED
        goto m_finish_GetOEMOption
    endif
    set OptDisketteSrc = $($R1)
m_ask_inf_retry = +
    FlushInf $(InfName)
    LibraryProcedure FileToCheck, $(!LIBHANDLE), AppendBackSlash $(OptDisketteSrc)
    set FileToCheck = $(FileToCheck)$(InfName)
    install Install-SeeIfFileIsPresent
    set OemSetupFilePath = $(FileToCheck)
    set NfError = 1
    ifstr(i) $(STATUS) == YES
        set NfError = 2
        shell $(OemSetupFilePath) Identify
        ifstr(i) $($R0) == "STATUS_SUCCESSFUL"
            ifcontains(i) $($R1) in $(OptionTypeList)
                Set OptionType = $($R1)
                shell $(OemSetupFilePath) ReturnOptions $($0) $(!STF_BUSTYPE)
                ifstr(i) $($R0) == STATUS_SUCCESSFUL
                     set OemList     = $($R1)
                     set OemTextList = $($R2)
                     goto m_asksingleselection
                endif
            endif
        endif
    endif
    ifstr(i) $(InfName) == $(InfName1)
        Set InfName = $(InfName2)
        goto m_ask_inf_retry
    endif
    read-syms NonFatalError$(NfError)$($0)
    shell "subroutn.inf" SetupMessage $($0) "NONFATAL" $(NonFatal)
    goto m_ask_dodiskette
m_asksingleselection = +
    shell "" DoSingleOption $(OemList) $(OemTextList) $(OptDiskette)
    ifstr(i) $($R0) == STATUS_FAILED
        set Status = STATUS_FAILED
        goto m_finish_GetOEMOption
    else-ifstr(i) $($R0) == STATUS_USERCANCEL
        set Status = STATUS_USERCANCEL
        goto m_finish_GetOEMOption
    endif
    set OptionChosen     = $($R1)
    set OptionChosenText = $($R2)
    set Duplicate = FALSE
    ForListDo $($1)
        ifstr(i) *($($), 2) == $(OemList)
            set OemFileName = *($($), 1)
            set Duplicate = TRUE
            FlushInf $(OemFileName)
            goto m_copyinf
        endif
    EndForListDo
    set Num = 0
    Set Abb = *($(TypeAbbs),~($(TypeNames),$(OptionType)))
m_nextinf = +
    ifint $(Num) < 99
        set OemFileName = "oem"$(Abb)$(Num)".inf"
        Debug-Output "OTHER.INF: Checking winsyspath for "$(OemFileName)
        set FileToCheck = $(!STF_WINDOWSSYSPATH)"\"$(OemFileName)
        install Install-SeeIfFileIsPresent
        ifstr(i) $(STATUS) == "YES"
            set-add Num = $(Num) 1
            goto m_nextinf
        else
            goto m_copyinf
        endif
    endif
    goto m_finish_GetOEMOption
m_copyinf = +
    set OemSrc = $(OemSetupFilePath)
    set OemDst = $(!STF_WINDOWSSYSPATH)"\"$(OemFileName)
    install Install-OemINF
    ifstr(i) $(Duplicate) == TRUE
    else
        set NewOemOptionList = >($(NewOemOptionList), {$(OemFileName), $(OemList), $(OemTextList)})
    endif
    set Status = STATUS_SUCCESSFUL
m_finish_GetOEMOption = +
    FlushInf $(InfName)
    Return $(Status) $(NewOemOptionList) $(OptionChosen) $(OptionChosenText) $(OptDisketteSrc)
[DoDiskette]
    set Status         = STATUS_FAILED
    set OemDiskette    = $($1)
    set OemDisketteSrc = $($2)
    Debug-Output $(STF_CONTEXTINFNAME)": DoDiskette called"
    read-syms DisketteDlg$($0)
    ui start "Diskette"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        set OemDisketteSrc = $(EditTextOut)
        ui pop 1
        set Status = STATUS_SUCCESSFUL
        goto finish_dodiskette
    else-ifstr(i) $(DLGEVENT) == "BACK"
        ui pop 1
        set Status = STATUS_USERCANCEL
        goto finish_dodiskette
    else
        ui pop 1
        goto finish_dodiskette
    endif
finish_dodiskette = +
    Return $(Status) $(OemDisketteSrc)
[DoSingleOption]
    set Status              = STATUS_FAILED
    set OemOptionChosen     = ""
    set OemOptionChosenText = ""
    set OemOptionList       = $($0)
    set OemOptionTextList   = $($1)
    set OemOptionTypeText   = $($2)
    read-syms OemSingleOptionDlg$(!STF_LANGUAGE)
    ui start "Diskette"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        ui pop 1
        ifstr(i) $(ListItemsOut) == ""
            set Status = STATUS_USERCANCEL
        else
            set OemOptionChosenText = $(ListItemsOut)
            set OemOptionChosen = *($($0), ~($(ListItemsIn), $(ListItemsOut)))
            set Status = STATUS_SUCCESSFUL
        endif
        goto finish_dosingleoption
    else-ifstr(i) $(DLGEVENT) == "BACK"
        ui pop 1
        set Status = STATUS_USERCANCEL
        goto finish_dosingleoption
    else
        ui pop 1
        set Status = STATUS_FAILED
        goto finish_dosingleoption
    endif
finish_dosingleoption = +
    Return $(Status) $(OemOptionChosen) $(OemOptionChosenText)
[Install-SeeIfFileIsPresent]
LibraryProcedure STATUS,$(!LIBHANDLE), CheckFileExistance $(FileToCheck)
exit
[Install-OemINF]
LibraryProcedure STATUS,$(!LIBHANDLE), CopySingleFile $(OemSrc) $(OemDst)
exit
[LanguagesSupported]
    ENG
[OptionDiskettesENG]
    Computer     = "Computer Driver"
    Video        = "Display Driver"
    Pointer      = "Mouse Driver"
    Keyboard     = "Keyboard Driver"
    Layout       = "Keyboard Layout"
    Language     = "Language Driver"
    Printer      = "Printer Driver"
    Scsi         = "Scsi Driver"
    Tape         = "Tape Driver"
    Sound        = "Sound Driver"
    Driver       = "Driver"
    NetAdapter   = "Network Adapter"
    NetDriver    = "Network Driver"
    NetTransport = "Network Transport"
    NetService   = "Network Service"
    Network      = "Network"
    NetProvider  = "Network Provider"
[OptionDisketteMultiENG]
    OptDiskette = "software"
[DisketteDlgENG]
    Caption        = "Insert Diskette"
    DlgText        = "Insert disk with "$(OemDiskette)" provided by the "+
                     "software or hardware manufacturer.  If the files can be found at "+
                     "a different location, for example on another drive "+
                     "type a new path to the files below."
    Continue       = "OK"
    Cancel         = "Cancel"
    DlgType        = "Edit"
    DlgTemplate    = "DISKETTE"
    Edit1Label     = ""
    EditTextIn     = $(OemDisketteSrc)
    EditFocus      = "ALL"
[OemSingleOptionDlgENG]
    Caption        = "Select OEM Option"
    DlgText        = "Choose a "$(OemOptionTypeText)" supported by this hardware "+
                     "manufacturer's disk."
    Continue       = "OK"
    Cancel         = "Cancel"
    Help           = "&Help"
    DlgType        = List
    DlgTemplate    = "OEMSINGLESEL"
    HelpContext    = $(!IDH_DB_OEMSINGLESEL_INS)
    ListItemsIn    = $(OemOptionTextList)
    ListItemsOut   = *($(OemOptionTextList),1)
[OemMultiOptionENG]
    Caption        = "Select OEM Option(s)"
    DlgText        = "Choose "$(DeviceOem)"(s) supported by this hardware "+
                     "manufacturer's disk."
    Continue       = "OK"
    Cancel         = "Cancel"
    Help           = "&Help"
    DlgType        = List
    DlgTemplate    = "OEMMULTISEL"
    HelpContext    = $(!IDH_DB_OEMMULTISEL_INS)
    ListItemsIn    = $(OemTextList)
    ListItemsOut   = {}
[NonFatalError1ENG]
NonFatal = "Setup cannot find OEMSETUP.INF or OEMSETNT.INF."$(!LF)$(!LF)+
           "Please type a new path to the OEMSETUP.INF file."
[NonFatalError2ENG]
NonFatal = "The OEMSETUP.INF or OEMSETNT.INF file found is not valid "+
           "for the current option."$(!LF)$(!LF)+
           "Please type a new path to the OEMSETUP.INF file."



